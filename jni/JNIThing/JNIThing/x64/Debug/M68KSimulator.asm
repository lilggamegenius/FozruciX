; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?ramStart@@3PEATmem_union@@EA			; ramStart
PUBLIC	?dataRegisters@@3PAPEATregisters@@A		; dataRegisters
PUBLIC	?addressRegisters@@3PAPEATregisters@@A		; addressRegisters
PUBLIC	?programCounter@@3IA				; programCounter
_BSS	SEGMENT
?ramStart@@3PEATmem_union@@EA DQ 01H DUP (?)		; ramStart
?dataRegisters@@3PAPEATregisters@@A DQ 08H DUP (?)	; dataRegisters
?addressRegisters@@3PAPEATregisters@@A DQ 09H DUP (?)	; addressRegisters
?programCounter@@3IA DD 01H DUP (?)			; programCounter
_BSS	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
PUBLIC	printf
PUBLIC	start
PUBLIC	close
PUBLIC	setByte
PUBLIC	setWord
PUBLIC	setLongWord
PUBLIC	addByte
PUBLIC	addWord
PUBLIC	addLongWord
PUBLIC	getByte
PUBLIC	getWord
PUBLIC	getLongWord
PUBLIC	clearMem
PUBLIC	getRamStart
PUBLIC	getRamSize
PUBLIC	memDump
PUBLIC	?lea@@YAXGW4AddressRegister@@@Z			; lea
PUBLIC	?pea@@YAXG@Z					; pea
PUBLIC	?add@@YAXW4Size@@W4DataRegister@@G@Z		; add
PUBLIC	?add@@YAXW4Size@@GW4DataRegister@@@Z		; add
PUBLIC	?adda@@YAXW4Size@@GW4AddressRegister@@@Z	; adda
PUBLIC	?addi@@YAXW4Size@@GI@Z				; addi
PUBLIC	?and@@YAXW4Size@@W4DataRegister@@G@Z		; and
PUBLIC	?and@@YAXW4Size@@GW4DataRegister@@@Z		; and
PUBLIC	?move@@YAXW4Size@@GG@Z				; move
PUBLIC	?move@@YAXW4Size@@GW4DataRegister@@@Z		; move
PUBLIC	?move@@YAXW4Size@@W4DataRegister@@G@Z		; move
PUBLIC	?move@@YAXW4Size@@W4DataRegister@@1@Z		; move
PUBLIC	?moveq@@YAXW4Size@@EG@Z				; moveq
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0BD@JCDCPOBF@DEBUG?5?9?5DLL?5Loaded?$AA@	; `string'
PUBLIC	??_C@_0CO@FJDOOOIP@DEBUG?5?9?5M68K?5ram?5created?4?5Starti@ ; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	??_C@_0BC@EPNOPCCD@Data?2M68kDump?4bin?$AA@	; `string'
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_fopen_s:PROC
EXTRN	__imp_fwrite:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN5
	DD	imagerel $LN5+223
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$start DD	imagerel $LN6
	DD	imagerel $LN6+147
	DD	imagerel $unwind$start
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$close DD	imagerel $LN6
	DD	imagerel $LN6+99
	DD	imagerel $unwind$close
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$setByte DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$setByte
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$setWord DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$setWord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$setLongWord DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$setLongWord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$addByte DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$addByte
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$addWord DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$addWord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$addLongWord DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$addLongWord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getByte DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$getByte
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getWord DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$getWord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getLongWord DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$getLongWord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$clearMem DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$clearMem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getRamStart DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$getRamStart
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getRamSize DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$getRamSize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$memDump DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$memDump
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?lea@@YAXGW4AddressRegister@@@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?lea@@YAXGW4AddressRegister@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pea@@YAXG@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$?pea@@YAXG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?add@@YAXW4Size@@W4DataRegister@@G@Z DD imagerel $LN8
	DD	imagerel $LN8+223
	DD	imagerel $unwind$?add@@YAXW4Size@@W4DataRegister@@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?add@@YAXW4Size@@GW4DataRegister@@@Z DD imagerel $LN8
	DD	imagerel $LN8+402
	DD	imagerel $unwind$?add@@YAXW4Size@@GW4DataRegister@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?adda@@YAXW4Size@@GW4AddressRegister@@@Z DD imagerel $LN8
	DD	imagerel $LN8+402
	DD	imagerel $unwind$?adda@@YAXW4Size@@GW4AddressRegister@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?addi@@YAXW4Size@@GI@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?addi@@YAXW4Size@@GI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?and@@YAXW4Size@@W4DataRegister@@G@Z DD imagerel $LN8
	DD	imagerel $LN8+284
	DD	imagerel $unwind$?and@@YAXW4Size@@W4DataRegister@@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?and@@YAXW4Size@@GW4DataRegister@@@Z DD imagerel $LN8
	DD	imagerel $LN8+406
	DD	imagerel $unwind$?and@@YAXW4Size@@GW4DataRegister@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?move@@YAXW4Size@@GG@Z DD imagerel $LN8
	DD	imagerel $LN8+186
	DD	imagerel $unwind$?move@@YAXW4Size@@GG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?move@@YAXW4Size@@GW4DataRegister@@@Z DD imagerel $LN8
	DD	imagerel $LN8+222
	DD	imagerel $unwind$?move@@YAXW4Size@@GW4DataRegister@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?move@@YAXW4Size@@W4DataRegister@@G@Z DD imagerel $LN8
	DD	imagerel $LN8+223
	DD	imagerel $unwind$?move@@YAXW4Size@@W4DataRegister@@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?move@@YAXW4Size@@W4DataRegister@@1@Z DD imagerel $LN8
	DD	imagerel $LN8+276
	DD	imagerel $unwind$?move@@YAXW4Size@@W4DataRegister@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?moveq@@YAXW4Size@@EG@Z DD imagerel $LN8
	DD	imagerel $LN8+175
	DD	imagerel $unwind$?moveq@@YAXW4Size@@EG@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BC@EPNOPCCD@Data?2M68kDump?4bin?$AA@
CONST	SEGMENT
??_C@_0BC@EPNOPCCD@Data?2M68kDump?4bin?$AA@ DB 'Data\M68kDump.bin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FJDOOOIP@DEBUG?5?9?5M68K?5ram?5created?4?5Starti@
CONST	SEGMENT
??_C@_0CO@FJDOOOIP@DEBUG?5?9?5M68K?5ram?5created?4?5Starti@ DB 'DEBUG - M'
	DB	'68K ram created. Starting offset: %p', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JCDCPOBF@DEBUG?5?9?5DLL?5Loaded?$AA@
CONST	SEGMENT
??_C@_0BD@JCDCPOBF@DEBUG?5?9?5DLL?5Loaded?$AA@ DB 'DEBUG - DLL Loaded', 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?moveq@@YAXW4Size@@EG@Z DD 025053201H
	DD	0117231cH
	DD	07010001fH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?move@@YAXW4Size@@W4DataRegister@@1@Z DD 05052f01H
	DD	01160319H
	DD	0700f001bH
	DD	0500eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?move@@YAXW4Size@@W4DataRegister@@G@Z DD 025053201H
	DD	0117231cH
	DD	07010001fH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?move@@YAXW4Size@@GW4DataRegister@@@Z DD 025053201H
	DD	0117231cH
	DD	07010001fH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?move@@YAXW4Size@@GG@Z DD 025053301H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?and@@YAXW4Size@@GW4DataRegister@@@Z DD 025053201H
	DD	0117231cH
	DD	07010001fH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?and@@YAXW4Size@@W4DataRegister@@G@Z DD 025053201H
	DD	0117231cH
	DD	07010001fH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?addi@@YAXW4Size@@GI@Z DD 025053201H
	DD	0117231cH
	DD	07010001fH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?adda@@YAXW4Size@@GW4AddressRegister@@@Z DD 025053201H
	DD	0117231cH
	DD	07010001fH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?add@@YAXW4Size@@GW4DataRegister@@@Z DD 025053201H
	DD	0117231cH
	DD	07010001fH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?add@@YAXW4Size@@W4DataRegister@@G@Z DD 025053201H
	DD	0117231cH
	DD	07010001fH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pea@@YAXG@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?lea@@YAXGW4AddressRegister@@@Z DD 05052c01H
	DD	01120315H
	DD	0700b0019H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$memDump DD 025052f19H
	DD	010a230fH
	DD	070030021H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
memDump$rtcName$0 DB 06dH
	DB	065H
	DB	06dH
	DB	044H
	DB	075H
	DB	06dH
	DB	070H
	DB	046H
	DB	069H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+4
memDump$rtcVarDesc DD 028H
	DD	08H
	DQ	FLAT:memDump$rtcName$0
	ORG $+48
memDump$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:memDump$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getRamSize DD 05051c01H
	DD	010a030dH
	DD	070030019H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getRamStart DD 05051c01H
	DD	010a030dH
	DD	070030019H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$clearMem DD 05051c01H
	DD	010a030dH
	DD	070030019H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getLongWord DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getWord DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getByte DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$addLongWord DD 05052c01H
	DD	01120315H
	DD	0700b0019H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$addWord DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$addByte DD 05052c01H
	DD	01120315H
	DD	0700b0019H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$setLongWord DD 05052c01H
	DD	01120315H
	DD	0700b0019H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$setWord DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$setByte DD 05052c01H
	DD	01120315H
	DD	0700b0019H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$close DD 025051e01H
	DD	010a230fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$start DD 025051e01H
	DD	010a230fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 035054a19H
	DD	011d3322H
	DD	070160033H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0188H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 058H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ DD 05051c01H
	DD	010a030dH
	DD	070030019H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 05051c01H
	DD	010a030dH
	DD	070030019H
	DD	05002H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?moveq@@YAXW4Size@@EG@Z
_TEXT	SEGMENT
tv64 = 192
size$ = 240
source$ = 248
destination$ = 256
?moveq@@YAXW4Size@@EG@Z PROC				; moveq, COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 230
$LN8:
	mov	WORD PTR [rsp+24], r8w
	mov	BYTE PTR [rsp+16], dl
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+280]
; Line 231
	mov	eax, DWORD PTR size$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 0
	je	SHORT $LN4@moveq
	cmp	DWORD PTR tv64[rbp], 1
	je	SHORT $LN5@moveq
	cmp	DWORD PTR tv64[rbp], 2
	je	SHORT $LN6@moveq
	jmp	SHORT $LN2@moveq
$LN4@moveq:
; Line 233
	movzx	edx, BYTE PTR source$[rbp]
	movzx	ecx, WORD PTR destination$[rbp]
	call	setByte
; Line 234
	jmp	SHORT $LN2@moveq
$LN5@moveq:
; Line 236
	movzx	eax, BYTE PTR source$[rbp]
	movzx	edx, ax
	movzx	ecx, WORD PTR destination$[rbp]
	call	setWord
; Line 237
	jmp	SHORT $LN2@moveq
$LN6@moveq:
; Line 239
	movzx	eax, BYTE PTR source$[rbp]
	movzx	ecx, ax
	call	getLongWord
	mov	edx, eax
	movzx	ecx, WORD PTR destination$[rbp]
	call	setLongWord
$LN2@moveq:
; Line 241
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?moveq@@YAXW4Size@@EG@Z ENDP				; moveq
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?move@@YAXW4Size@@W4DataRegister@@1@Z
_TEXT	SEGMENT
tv64 = 192
size$ = 240
source$ = 248
destination$ = 256
?move@@YAXW4Size@@W4DataRegister@@1@Z PROC		; move, COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 217
$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 216				; 000000d8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+248]
; Line 218
	mov	eax, DWORD PTR size$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 0
	je	SHORT $LN4@move
	cmp	DWORD PTR tv64[rbp], 1
	je	SHORT $LN5@move
	cmp	DWORD PTR tv64[rbp], 2
	je	$LN6@move
	jmp	$LN2@move
$LN4@move:
; Line 220
	movsxd	rax, DWORD PTR source$[rbp]
	lea	rcx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR destination$[rbp]
	lea	r8, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	r8d, 1
	imul	r8, r8, 0
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdx+r8], al
; Line 221
	jmp	SHORT $LN2@move
$LN5@move:
; Line 223
	movsxd	rax, DWORD PTR source$[rbp]
	lea	rcx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 2
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR destination$[rbp]
	lea	r8, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	r8d, 2
	imul	r8, r8, 0
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR [rdx+r8], ax
; Line 224
	jmp	SHORT $LN2@move
$LN6@move:
; Line 226
	movsxd	rax, DWORD PTR source$[rbp]
	lea	rcx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR destination$[rbp]
	lea	rdx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
$LN2@move:
; Line 228
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?move@@YAXW4Size@@W4DataRegister@@1@Z ENDP		; move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?move@@YAXW4Size@@W4DataRegister@@G@Z
_TEXT	SEGMENT
tv64 = 192
size$ = 240
source$ = 248
destination$ = 256
?move@@YAXW4Size@@W4DataRegister@@G@Z PROC		; move, COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 204
$LN8:
	mov	WORD PTR [rsp+24], r8w
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+280]
; Line 205
	mov	eax, DWORD PTR size$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 0
	je	SHORT $LN4@move
	cmp	DWORD PTR tv64[rbp], 1
	je	SHORT $LN5@move
	cmp	DWORD PTR tv64[rbp], 2
	je	SHORT $LN6@move
	jmp	SHORT $LN2@move
$LN4@move:
; Line 207
	movsxd	rax, DWORD PTR source$[rbp]
	lea	rcx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	edx, BYTE PTR [rax+rcx]
	movzx	ecx, WORD PTR destination$[rbp]
	call	setByte
; Line 208
	jmp	SHORT $LN2@move
$LN5@move:
; Line 210
	movsxd	rax, DWORD PTR source$[rbp]
	lea	rcx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	edx, WORD PTR [rax+rcx]
	movzx	ecx, WORD PTR destination$[rbp]
	call	setWord
; Line 211
	jmp	SHORT $LN2@move
$LN6@move:
; Line 213
	movsxd	rax, DWORD PTR source$[rbp]
	lea	rcx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	edx, DWORD PTR [rax]
	movzx	ecx, WORD PTR destination$[rbp]
	call	setLongWord
$LN2@move:
; Line 215
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?move@@YAXW4Size@@W4DataRegister@@G@Z ENDP		; move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?move@@YAXW4Size@@GW4DataRegister@@@Z
_TEXT	SEGMENT
tv64 = 192
size$ = 240
source$ = 248
destination$ = 256
?move@@YAXW4Size@@GW4DataRegister@@@Z PROC		; move, COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 191
$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	WORD PTR [rsp+16], dx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+280]
; Line 192
	mov	eax, DWORD PTR size$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 0
	je	SHORT $LN4@move
	cmp	DWORD PTR tv64[rbp], 1
	je	SHORT $LN5@move
	cmp	DWORD PTR tv64[rbp], 2
	je	SHORT $LN6@move
	jmp	SHORT $LN2@move
$LN4@move:
; Line 194
	movzx	ecx, WORD PTR source$[rbp]
	call	getByte
	movsxd	rcx, DWORD PTR destination$[rbp]
	lea	rdx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	BYTE PTR [rcx+rdx], al
; Line 195
	jmp	SHORT $LN2@move
$LN5@move:
; Line 197
	movzx	ecx, WORD PTR source$[rbp]
	call	getWord
	movsxd	rcx, DWORD PTR destination$[rbp]
	lea	rdx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	WORD PTR [rcx+rdx], ax
; Line 198
	jmp	SHORT $LN2@move
$LN6@move:
; Line 200
	movzx	ecx, WORD PTR source$[rbp]
	call	getLongWord
	movsxd	rcx, DWORD PTR destination$[rbp]
	lea	rdx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rcx], eax
$LN2@move:
; Line 202
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?move@@YAXW4Size@@GW4DataRegister@@@Z ENDP		; move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?move@@YAXW4Size@@GG@Z
_TEXT	SEGMENT
tv64 = 192
size$ = 240
source$ = 248
destination$ = 256
?move@@YAXW4Size@@GG@Z PROC				; move, COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 178
$LN8:
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+280]
; Line 179
	mov	eax, DWORD PTR size$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 0
	je	SHORT $LN4@move
	cmp	DWORD PTR tv64[rbp], 1
	je	SHORT $LN5@move
	cmp	DWORD PTR tv64[rbp], 2
	je	SHORT $LN6@move
	jmp	SHORT $LN2@move
$LN4@move:
; Line 181
	movzx	ecx, WORD PTR source$[rbp]
	call	getByte
	movzx	edx, al
	movzx	ecx, WORD PTR destination$[rbp]
	call	setByte
; Line 182
	jmp	SHORT $LN2@move
$LN5@move:
; Line 184
	movzx	ecx, WORD PTR source$[rbp]
	call	getWord
	movzx	edx, ax
	movzx	ecx, WORD PTR destination$[rbp]
	call	setWord
; Line 185
	jmp	SHORT $LN2@move
$LN6@move:
; Line 187
	movzx	ecx, WORD PTR source$[rbp]
	call	getLongWord
	mov	edx, eax
	movzx	ecx, WORD PTR destination$[rbp]
	call	setLongWord
$LN2@move:
; Line 189
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?move@@YAXW4Size@@GG@Z ENDP				; move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?and@@YAXW4Size@@GW4DataRegister@@@Z
_TEXT	SEGMENT
tv158 = 192
tv156 = 192
tv154 = 192
tv64 = 192
tv87 = 200
tv69 = 200
size$ = 240
ea$ = 248
dn$ = 256
?and@@YAXW4Size@@GW4DataRegister@@@Z PROC		; and, COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 165
$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	WORD PTR [rsp+16], dx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+280]
; Line 166
	mov	eax, DWORD PTR size$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 0
	je	SHORT $LN4@and
	cmp	DWORD PTR tv64[rbp], 1
	je	$LN5@and
	cmp	DWORD PTR tv64[rbp], 2
	je	$LN6@and
	jmp	$LN2@and
$LN4@and:
; Line 168
	movsxd	rax, DWORD PTR dn$[rbp]
	lea	rcx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR tv158[rbp], rax
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	QWORD PTR tv69[rbp], rcx
	movzx	ecx, WORD PTR ea$[rbp]
	call	getByte
	movzx	eax, al
	mov	rdx, QWORD PTR tv69[rbp]
	mov	rcx, QWORD PTR tv158[rbp]
	movzx	ecx, BYTE PTR [rcx+rdx]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR dn$[rbp]
	lea	r8, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	BYTE PTR [rdx+rcx], al
; Line 169
	jmp	$LN2@and
$LN5@and:
; Line 171
	movsxd	rax, DWORD PTR dn$[rbp]
	lea	rcx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR tv156[rbp], rax
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	QWORD PTR tv87[rbp], rcx
	movzx	ecx, WORD PTR ea$[rbp]
	call	getWord
	movzx	eax, ax
	mov	rdx, QWORD PTR tv87[rbp]
	mov	rcx, QWORD PTR tv156[rbp]
	movzx	ecx, WORD PTR [rcx+rdx]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR dn$[rbp]
	lea	r8, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	WORD PTR [rdx+rcx], ax
; Line 172
	jmp	SHORT $LN2@and
$LN6@and:
; Line 174
	movsxd	rax, DWORD PTR dn$[rbp]
	lea	rcx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR tv154[rbp], rax
	movzx	ecx, WORD PTR ea$[rbp]
	call	getLongWord
	mov	rcx, QWORD PTR tv154[rbp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR dn$[rbp]
	lea	rdx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rcx], eax
$LN2@and:
; Line 176
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?and@@YAXW4Size@@GW4DataRegister@@@Z ENDP		; and
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?and@@YAXW4Size@@W4DataRegister@@G@Z
_TEXT	SEGMENT
tv64 = 192
size$ = 240
dn$ = 248
ea$ = 256
?and@@YAXW4Size@@W4DataRegister@@G@Z PROC		; and, COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 152
$LN8:
	mov	WORD PTR [rsp+24], r8w
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+280]
; Line 153
	mov	eax, DWORD PTR size$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 0
	je	SHORT $LN4@and
	cmp	DWORD PTR tv64[rbp], 1
	je	SHORT $LN5@and
	cmp	DWORD PTR tv64[rbp], 2
	je	$LN6@and
	jmp	$LN2@and
$LN4@and:
; Line 155
	movzx	ecx, WORD PTR ea$[rbp]
	call	getByte
	movzx	eax, al
	movsxd	rcx, DWORD PTR dn$[rbp]
	lea	rdx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, 1
	imul	rdx, rdx, 0
	movzx	ecx, BYTE PTR [rcx+rdx]
	and	eax, ecx
	movzx	edx, al
	movzx	ecx, WORD PTR ea$[rbp]
	call	setByte
; Line 156
	jmp	SHORT $LN2@and
$LN5@and:
; Line 158
	movzx	ecx, WORD PTR ea$[rbp]
	call	getWord
	movzx	eax, ax
	movsxd	rcx, DWORD PTR dn$[rbp]
	lea	rdx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, 2
	imul	rdx, rdx, 0
	movzx	ecx, WORD PTR [rcx+rdx]
	and	eax, ecx
	movzx	edx, ax
	movzx	ecx, WORD PTR ea$[rbp]
	call	setWord
; Line 159
	jmp	SHORT $LN2@and
$LN6@and:
; Line 161
	movzx	ecx, WORD PTR ea$[rbp]
	call	getLongWord
	movsxd	rcx, DWORD PTR dn$[rbp]
	lea	rdx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rcx, QWORD PTR [rdx+rcx*8]
	and	eax, DWORD PTR [rcx]
	mov	edx, eax
	movzx	ecx, WORD PTR ea$[rbp]
	call	setLongWord
$LN2@and:
; Line 163
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?and@@YAXW4Size@@W4DataRegister@@G@Z ENDP		; and
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?addi@@YAXW4Size@@GI@Z
_TEXT	SEGMENT
tv64 = 192
size$ = 240
ea$ = 248
data$ = 256
?addi@@YAXW4Size@@GI@Z PROC				; addi, COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 139
$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	WORD PTR [rsp+16], dx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+280]
; Line 140
	mov	eax, DWORD PTR size$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 0
	je	SHORT $LN4@addi
	cmp	DWORD PTR tv64[rbp], 1
	je	SHORT $LN5@addi
	cmp	DWORD PTR tv64[rbp], 2
	je	SHORT $LN6@addi
	jmp	SHORT $LN2@addi
$LN4@addi:
; Line 142
	movzx	edx, BYTE PTR data$[rbp]
	movzx	ecx, WORD PTR ea$[rbp]
	call	addByte
; Line 143
	jmp	SHORT $LN2@addi
$LN5@addi:
; Line 145
	movzx	edx, WORD PTR data$[rbp]
	movzx	ecx, WORD PTR ea$[rbp]
	call	addWord
; Line 146
	jmp	SHORT $LN2@addi
$LN6@addi:
; Line 148
	mov	edx, DWORD PTR data$[rbp]
	movzx	ecx, WORD PTR ea$[rbp]
	call	addLongWord
$LN2@addi:
; Line 150
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?addi@@YAXW4Size@@GI@Z ENDP				; addi
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?adda@@YAXW4Size@@GW4AddressRegister@@@Z
_TEXT	SEGMENT
tv159 = 192
tv157 = 192
tv155 = 192
tv64 = 192
tv87 = 200
tv69 = 200
size$ = 240
ea$ = 248
an$ = 256
?adda@@YAXW4Size@@GW4AddressRegister@@@Z PROC		; adda, COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 126
$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	WORD PTR [rsp+16], dx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+280]
; Line 127
	mov	eax, DWORD PTR size$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 0
	je	SHORT $LN4@adda
	cmp	DWORD PTR tv64[rbp], 1
	je	$LN5@adda
	cmp	DWORD PTR tv64[rbp], 2
	je	$LN6@adda
	jmp	$LN2@adda
$LN4@adda:
; Line 129
	movsxd	rax, DWORD PTR an$[rbp]
	lea	rcx, OFFSET FLAT:?addressRegisters@@3PAPEATregisters@@A ; addressRegisters
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR tv159[rbp], rax
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	QWORD PTR tv69[rbp], rcx
	movzx	ecx, WORD PTR ea$[rbp]
	call	getByte
	movzx	eax, al
	mov	rdx, QWORD PTR tv69[rbp]
	mov	rcx, QWORD PTR tv159[rbp]
	movzx	ecx, BYTE PTR [rcx+rdx]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR an$[rbp]
	lea	r8, OFFSET FLAT:?addressRegisters@@3PAPEATregisters@@A ; addressRegisters
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	BYTE PTR [rdx+rcx], al
; Line 130
	jmp	$LN2@adda
$LN5@adda:
; Line 132
	movsxd	rax, DWORD PTR an$[rbp]
	lea	rcx, OFFSET FLAT:?addressRegisters@@3PAPEATregisters@@A ; addressRegisters
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR tv157[rbp], rax
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	QWORD PTR tv87[rbp], rcx
	movzx	ecx, WORD PTR ea$[rbp]
	call	getWord
	movzx	eax, ax
	mov	rdx, QWORD PTR tv87[rbp]
	mov	rcx, QWORD PTR tv157[rbp]
	movzx	ecx, WORD PTR [rcx+rdx]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR an$[rbp]
	lea	r8, OFFSET FLAT:?addressRegisters@@3PAPEATregisters@@A ; addressRegisters
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	WORD PTR [rdx+rcx], ax
; Line 133
	jmp	SHORT $LN2@adda
$LN6@adda:
; Line 135
	movsxd	rax, DWORD PTR an$[rbp]
	lea	rcx, OFFSET FLAT:?addressRegisters@@3PAPEATregisters@@A ; addressRegisters
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR tv155[rbp], rax
	movzx	ecx, WORD PTR ea$[rbp]
	call	getLongWord
	mov	rcx, QWORD PTR tv155[rbp]
	add	eax, DWORD PTR [rcx]
	movsxd	rcx, DWORD PTR an$[rbp]
	lea	rdx, OFFSET FLAT:?addressRegisters@@3PAPEATregisters@@A ; addressRegisters
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rcx], eax
$LN2@adda:
; Line 137
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?adda@@YAXW4Size@@GW4AddressRegister@@@Z ENDP		; adda
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?add@@YAXW4Size@@GW4DataRegister@@@Z
_TEXT	SEGMENT
tv159 = 192
tv157 = 192
tv155 = 192
tv64 = 192
tv87 = 200
tv69 = 200
size$ = 240
ea$ = 248
dn$ = 256
?add@@YAXW4Size@@GW4DataRegister@@@Z PROC		; add, COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 113
$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	WORD PTR [rsp+16], dx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+280]
; Line 114
	mov	eax, DWORD PTR size$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 0
	je	SHORT $LN4@add
	cmp	DWORD PTR tv64[rbp], 1
	je	$LN5@add
	cmp	DWORD PTR tv64[rbp], 2
	je	$LN6@add
	jmp	$LN2@add
$LN4@add:
; Line 116
	movsxd	rax, DWORD PTR dn$[rbp]
	lea	rcx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR tv159[rbp], rax
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	QWORD PTR tv69[rbp], rcx
	movzx	ecx, WORD PTR ea$[rbp]
	call	getByte
	movzx	eax, al
	mov	rdx, QWORD PTR tv69[rbp]
	mov	rcx, QWORD PTR tv159[rbp]
	movzx	ecx, BYTE PTR [rcx+rdx]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR dn$[rbp]
	lea	r8, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	BYTE PTR [rdx+rcx], al
; Line 117
	jmp	$LN2@add
$LN5@add:
; Line 119
	movsxd	rax, DWORD PTR dn$[rbp]
	lea	rcx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR tv157[rbp], rax
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	QWORD PTR tv87[rbp], rcx
	movzx	ecx, WORD PTR ea$[rbp]
	call	getWord
	movzx	eax, ax
	mov	rdx, QWORD PTR tv87[rbp]
	mov	rcx, QWORD PTR tv157[rbp]
	movzx	ecx, WORD PTR [rcx+rdx]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR dn$[rbp]
	lea	r8, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	WORD PTR [rdx+rcx], ax
; Line 120
	jmp	SHORT $LN2@add
$LN6@add:
; Line 122
	movsxd	rax, DWORD PTR dn$[rbp]
	lea	rcx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR tv155[rbp], rax
	movzx	ecx, WORD PTR ea$[rbp]
	call	getLongWord
	mov	rcx, QWORD PTR tv155[rbp]
	add	eax, DWORD PTR [rcx]
	movsxd	rcx, DWORD PTR dn$[rbp]
	lea	rdx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rcx], eax
$LN2@add:
; Line 124
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?add@@YAXW4Size@@GW4DataRegister@@@Z ENDP		; add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?add@@YAXW4Size@@W4DataRegister@@G@Z
_TEXT	SEGMENT
tv64 = 192
size$ = 240
dn$ = 248
ea$ = 256
?add@@YAXW4Size@@W4DataRegister@@G@Z PROC		; add, COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 100
$LN8:
	mov	WORD PTR [rsp+24], r8w
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+280]
; Line 101
	mov	eax, DWORD PTR size$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 0
	je	SHORT $LN4@add
	cmp	DWORD PTR tv64[rbp], 1
	je	SHORT $LN5@add
	cmp	DWORD PTR tv64[rbp], 2
	je	SHORT $LN6@add
	jmp	SHORT $LN2@add
$LN4@add:
; Line 103
	movsxd	rax, DWORD PTR dn$[rbp]
	lea	rcx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	edx, BYTE PTR [rax+rcx]
	movzx	ecx, WORD PTR ea$[rbp]
	call	addByte
; Line 104
	jmp	SHORT $LN2@add
$LN5@add:
; Line 106
	movsxd	rax, DWORD PTR dn$[rbp]
	lea	rcx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	edx, WORD PTR [rax+rcx]
	movzx	ecx, WORD PTR ea$[rbp]
	call	addWord
; Line 107
	jmp	SHORT $LN2@add
$LN6@add:
; Line 109
	movsxd	rax, DWORD PTR dn$[rbp]
	lea	rcx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	edx, DWORD PTR [rax]
	movzx	ecx, WORD PTR ea$[rbp]
	call	addLongWord
$LN2@add:
; Line 111
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?add@@YAXW4Size@@W4DataRegister@@G@Z ENDP		; add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?pea@@YAXG@Z
_TEXT	SEGMENT
address$ = 224
?pea@@YAXG@Z PROC					; pea, COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 95
$LN3:
	mov	WORD PTR [rsp+8], cx
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+232]
; Line 96
	mov	eax, 8
	imul	rax, rax, 7
	lea	rcx, OFFSET FLAT:?addressRegisters@@3PAPEATregisters@@A ; addressRegisters
	mov	rax, QWORD PTR [rcx+rax]
	sub	rax, 16
	mov	ecx, 8
	imul	rcx, rcx, 7
	lea	rdx, OFFSET FLAT:?addressRegisters@@3PAPEATregisters@@A ; addressRegisters
	mov	QWORD PTR [rdx+rcx], rax
; Line 97
	movzx	eax, WORD PTR address$[rbp]
	mov	ecx, 8
	imul	rcx, rcx, 7
	lea	rdx, OFFSET FLAT:?addressRegisters@@3PAPEATregisters@@A ; addressRegisters
	mov	rcx, QWORD PTR [rdx+rcx]
	mov	DWORD PTR [rcx], eax
; Line 98
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?pea@@YAXG@Z ENDP					; pea
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lea@@YAXGW4AddressRegister@@@Z
_TEXT	SEGMENT
address$ = 224
An$ = 232
?lea@@YAXGW4AddressRegister@@@Z PROC			; lea, COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 91
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	WORD PTR [rsp+8], cx
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+232]
; Line 92
	movzx	eax, WORD PTR address$[rbp]
	mov	rcx, QWORD PTR ?ramStart@@3PEATmem_union@@EA ; ramStart
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR An$[rbp]
	lea	rdx, OFFSET FLAT:?addressRegisters@@3PAPEATregisters@@A ; addressRegisters
	mov	QWORD PTR [rdx+rcx*8], rax
; Line 93
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?lea@@YAXGW4AddressRegister@@@Z ENDP			; lea
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT memDump
_TEXT	SEGMENT
memDumpFile$ = 8
__$ArrayPad$ = 216
memDump	PROC						; COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 84
$LN3:
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
; Line 86
	lea	r8, OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0BC@EPNOPCCD@Data?2M68kDump?4bin?$AA@
	lea	rcx, QWORD PTR memDumpFile$[rbp]
	call	QWORD PTR __imp_fopen_s
; Line 87
	mov	r9, QWORD PTR memDumpFile$[rbp]
	xor	r8d, r8d
	mov	edx, 1
	mov	rcx, QWORD PTR ?ramStart@@3PEATmem_union@@EA ; ramStart
	call	QWORD PTR __imp_fwrite
; Line 88
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:memDump$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
memDump	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT getRamSize
_TEXT	SEGMENT
getRamSize PROC						; COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 80
$LN3:
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 81
	xor	eax, eax
; Line 82
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
getRamSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT getRamStart
_TEXT	SEGMENT
getRamStart PROC					; COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 76
$LN3:
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 77
	lea	rax, OFFSET FLAT:?ramStart@@3PEATmem_union@@EA ; ramStart
; Line 78
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
getRamStart ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT clearMem
_TEXT	SEGMENT
clearMem PROC						; COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 72
$LN3:
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 73
	mov	rdi, QWORD PTR ?ramStart@@3PEATmem_union@@EA ; ramStart
	xor	eax, eax
	xor	ecx, ecx
	rep stosb
; Line 74
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
clearMem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT getLongWord
_TEXT	SEGMENT
address$ = 224
getLongWord PROC					; COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 68
$LN3:
	mov	WORD PTR [rsp+8], cx
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+232]
; Line 69
	movzx	eax, WORD PTR address$[rbp]
	mov	rcx, QWORD PTR ?ramStart@@3PEATmem_union@@EA ; ramStart
	mov	eax, DWORD PTR [rcx+rax*4]
; Line 70
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
getLongWord ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT getWord
_TEXT	SEGMENT
address$ = 224
getWord	PROC						; COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 65
$LN3:
	mov	WORD PTR [rsp+8], cx
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+232]
; Line 66
	movzx	eax, WORD PTR address$[rbp]
	mov	rcx, QWORD PTR ?ramStart@@3PEATmem_union@@EA ; ramStart
	movzx	eax, WORD PTR [rcx+rax*2]
; Line 67
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
getWord	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT getByte
_TEXT	SEGMENT
address$ = 224
getByte	PROC						; COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 62
$LN3:
	mov	WORD PTR [rsp+8], cx
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+232]
; Line 63
	movzx	eax, WORD PTR address$[rbp]
	mov	rcx, QWORD PTR ?ramStart@@3PEATmem_union@@EA ; ramStart
	movzx	eax, BYTE PTR [rcx+rax]
; Line 64
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
getByte	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT addLongWord
_TEXT	SEGMENT
address$ = 224
num$ = 232
addLongWord PROC					; COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 58
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	WORD PTR [rsp+8], cx
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+232]
; Line 59
	movzx	eax, WORD PTR address$[rbp]
	mov	rcx, QWORD PTR ?ramStart@@3PEATmem_union@@EA ; ramStart
	mov	edx, DWORD PTR num$[rbp]
	mov	DWORD PTR [rcx+rax*4], edx
; Line 60
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
addLongWord ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT addWord
_TEXT	SEGMENT
address$ = 224
num$ = 232
addWord	PROC						; COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 54
$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+232]
; Line 55
	movzx	eax, WORD PTR address$[rbp]
	mov	rcx, QWORD PTR ?ramStart@@3PEATmem_union@@EA ; ramStart
	movzx	edx, WORD PTR num$[rbp]
	mov	WORD PTR [rcx+rax*2], dx
; Line 56
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
addWord	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT addByte
_TEXT	SEGMENT
address$ = 224
num$ = 232
addByte	PROC						; COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 50
$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	WORD PTR [rsp+8], cx
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+232]
; Line 51
	movzx	eax, WORD PTR address$[rbp]
	mov	rcx, QWORD PTR ?ramStart@@3PEATmem_union@@EA ; ramStart
	movzx	edx, BYTE PTR num$[rbp]
	mov	BYTE PTR [rcx+rax], dl
; Line 52
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
addByte	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT setLongWord
_TEXT	SEGMENT
address$ = 224
num$ = 232
setLongWord PROC					; COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 46
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	WORD PTR [rsp+8], cx
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+232]
; Line 47
	movzx	eax, WORD PTR address$[rbp]
	mov	rcx, QWORD PTR ?ramStart@@3PEATmem_union@@EA ; ramStart
	mov	edx, DWORD PTR num$[rbp]
	mov	DWORD PTR [rcx+rax*4], edx
; Line 48
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
setLongWord ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT setWord
_TEXT	SEGMENT
address$ = 224
num$ = 232
setWord	PROC						; COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 42
$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+232]
; Line 43
	movzx	eax, WORD PTR address$[rbp]
	mov	rcx, QWORD PTR ?ramStart@@3PEATmem_union@@EA ; ramStart
	movzx	edx, WORD PTR num$[rbp]
	mov	WORD PTR [rcx+rax*2], dx
; Line 44
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
setWord	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT setByte
_TEXT	SEGMENT
address$ = 224
num$ = 232
setByte	PROC						; COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 38
$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	WORD PTR [rsp+8], cx
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+232]
; Line 39
	movzx	eax, WORD PTR address$[rbp]
	mov	rcx, QWORD PTR ?ramStart@@3PEATmem_union@@EA ; ramStart
	movzx	edx, BYTE PTR num$[rbp]
	mov	BYTE PTR [rcx+rax], dl
; Line 40
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
setByte	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT close
_TEXT	SEGMENT
i$1 = 4
close	PROC						; COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 16
$LN6:
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 17
	mov	rcx, QWORD PTR ?ramStart@@3PEATmem_union@@EA ; ramStart
	call	QWORD PTR __imp_free
; Line 18
	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@close
$LN2@close:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@close:
	cmp	DWORD PTR i$1[rbp], 8
	jge	SHORT $LN3@close
; Line 19
	movsxd	rax, DWORD PTR i$1[rbp]
	lea	rcx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	QWORD PTR __imp_free
; Line 20
	jmp	SHORT $LN2@close
$LN3@close:
; Line 21
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
close	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT start
_TEXT	SEGMENT
i$1 = 4
start	PROC						; COMDAT
; File c:\users\fozrucix\workspace\fozrucix\jni\jnithing\jnithing\m68ksimulator.cpp
; Line 6
$LN6:
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 7
	lea	rcx, OFFSET FLAT:??_C@_0BD@JCDCPOBF@DEBUG?5?9?5DLL?5Loaded?$AA@
	call	printf
; Line 8
	xor	ecx, ecx
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR ?ramStart@@3PEATmem_union@@EA, rax ; ramStart
; Line 9
	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@start
$LN2@start:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@start:
	cmp	DWORD PTR i$1[rbp], 8
	jge	SHORT $LN3@start
; Line 10
	mov	ecx, 4
	call	QWORD PTR __imp_malloc
	movsxd	rcx, DWORD PTR i$1[rbp]
	lea	rdx, OFFSET FLAT:?dataRegisters@@3PAPEATregisters@@A ; dataRegisters
	mov	QWORD PTR [rdx+rcx*8], rax
; Line 11
	jmp	SHORT $LN2@start
$LN3@start:
; Line 12
	mov	DWORD PTR ?programCounter@@3IA, 0	; programCounter
; Line 13
	lea	rdx, OFFSET FLAT:?ramStart@@3PEATmem_union@@EA ; ramStart
	lea	rcx, OFFSET FLAT:??_C@_0CO@FJDOOOIP@DEBUG?5?9?5M68K?5ram?5created?4?5Starti@
	call	printf
; Line 14
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
start	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 4
_ArgList$ = 40
_Stream$ = 72
_Format$ = 104
_ArgList$ = 136
__$ArrayPad$ = 344
_Format$ = 384
printf	PROC						; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; Line 950
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 408				; 00000198H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 102				; 00000066H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+440]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
; Line 953
	call	??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
	lea	rax, QWORD PTR _Format$[rbp+8]
	mov	QWORD PTR _ArgList$[rbp], rax
; Line 954
	mov	rax, QWORD PTR _ArgList$[rbp]
	mov	QWORD PTR _ArgList$[rbp], rax
	mov	rax, QWORD PTR _Format$[rbp]
	mov	QWORD PTR _Format$[rbp], rax
	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	QWORD PTR _Stream$[rbp], rax
; Line 639
	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rbp]
	mov	QWORD PTR [rsp+32], rcx
	xor	r9d, r9d
	mov	r8, QWORD PTR _Format$[rbp]
	mov	rdx, QWORD PTR _Stream$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf
; Line 954
	mov	DWORD PTR _Result$[rbp], eax
; Line 955
	mov	QWORD PTR _ArgList$[rbp], 0
; Line 956
	mov	eax, DWORD PTR _Result$[rbp]
; Line 957
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ PROC ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
; Line 144
$LN3:
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 146
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ENDP ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
; Line 73
$LN3:
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 75
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 76
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
